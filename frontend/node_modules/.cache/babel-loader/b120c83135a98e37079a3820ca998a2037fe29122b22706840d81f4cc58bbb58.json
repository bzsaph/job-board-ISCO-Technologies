{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\nexport const applyJob = createAsyncThunk('applications/apply', async data => {\n  const res = await api.post('/applications', data);\n  return res.data;\n});\nexport const getApplicationsForJob = createAsyncThunk('applications/forJob', async jobId => {\n  const res = await api.get(`/applications/job/${jobId}`);\n  console.log('Applications for job:', res.data);\n  return res.data;\n});\nexport const fetchJob = createAsyncThunk('jobs/fetchJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/jobs/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: err.message\n    });\n  }\n});\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({\n  id,\n  status\n}) => {\n  const res = await api.put(`/applications/${id}`, {\n    status\n  });\n  return res.data;\n});\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],\n    status: 'idle'\n  },\n  reducers: {},\n  extraReducers: b => {\n    b.addCase(applyJob.fulfilled, (s, a) => {\n      s.last = a.payload;\n    });\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => {\n      s.list = a.payload;\n    });\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => {\n      s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x);\n    });\n  }\n});\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","applyJob","data","res","post","getApplicationsForJob","jobId","get","console","log","fetchJob","rejectWithValue","err","_err$response","response","message","updateApplicationStatus","id","status","put","slice","name","initialState","list","reducers","extraReducers","b","addCase","fulfilled","s","a","last","payload","map","x","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/store/slices/applicationsSlice.js"],"sourcesContent":["\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\nexport const applyJob = createAsyncThunk('applications/apply', async (data) => {\n  const res = await api.post('/applications', data);\n  return res.data;\n});\nexport const getApplicationsForJob = createAsyncThunk('applications/forJob', async (jobId) => {\n  const res = await api.get(`/applications/job/${jobId}`);\n  console.log('Applications for job:', res.data);\n  return res.data;\n});\n\nexport const fetchJob = createAsyncThunk(\n  'jobs/fetchJob',\n  async (jobId, { rejectWithValue }) => {\n    try {\n      const res = await api.get(`/jobs/${jobId}`);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({ id, status }) => {\n  const res = await api.put(`/applications/${id}`, { status });\n  return res.data;\n});\n\nconst slice = createSlice({\n  name: 'applications',\n  initialState: { list: [], status: 'idle' },\n  reducers: {},\n  extraReducers: (b) => {\n    b.addCase(applyJob.fulfilled, (s, a) => { s.last = a.payload; });\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => { s.list = a.payload; });\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => { s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x); });\n  }\n});\nexport default slice.reducer;\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,oBAAoB;AAEpC,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,oBAAoB,EAAE,MAAOG,IAAI,IAAK;EAC7E,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,eAAe,EAAEF,IAAI,CAAC;EACjD,OAAOC,GAAG,CAACD,IAAI;AACjB,CAAC,CAAC;AACF,OAAO,MAAMG,qBAAqB,GAAGN,gBAAgB,CAAC,qBAAqB,EAAE,MAAOO,KAAK,IAAK;EAC5F,MAAMH,GAAG,GAAG,MAAMH,GAAG,CAACO,GAAG,CAAC,qBAAqBD,KAAK,EAAE,CAAC;EACvDE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEN,GAAG,CAACD,IAAI,CAAC;EAC9C,OAAOC,GAAG,CAACD,IAAI;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMQ,QAAQ,GAAGX,gBAAgB,CACtC,eAAe,EACf,OAAOO,KAAK,EAAE;EAAEK;AAAgB,CAAC,KAAK;EACpC,IAAI;IACF,MAAMR,GAAG,GAAG,MAAMH,GAAG,CAACO,GAAG,CAAC,SAASD,KAAK,EAAE,CAAC;IAC3C,OAAOH,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOU,GAAG,EAAE;IAAA,IAAAC,aAAA;IACZ,OAAOF,eAAe,CAAC,EAAAE,aAAA,GAAAD,GAAG,CAACE,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcX,IAAI,KAAI;MAAEa,OAAO,EAAEH,GAAG,CAACG;IAAQ,CAAC,CAAC;EACxE;AACF,CACF,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAGjB,gBAAgB,CAAC,qBAAqB,EAAE,OAAO;EAAEkB,EAAE;EAAEC;AAAO,CAAC,KAAK;EACvG,MAAMf,GAAG,GAAG,MAAMH,GAAG,CAACmB,GAAG,CAAC,iBAAiBF,EAAE,EAAE,EAAE;IAAEC;EAAO,CAAC,CAAC;EAC5D,OAAOf,GAAG,CAACD,IAAI;AACjB,CAAC,CAAC;AAEF,MAAMkB,KAAK,GAAGtB,WAAW,CAAC;EACxBuB,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEL,MAAM,EAAE;EAAO,CAAC;EAC1CM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,CAAC,IAAK;IACpBA,CAAC,CAACC,OAAO,CAAC1B,QAAQ,CAAC2B,SAAS,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;MAAED,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACE,OAAO;IAAE,CAAC,CAAC;IAChEN,CAAC,CAACC,OAAO,CAACtB,qBAAqB,CAACuB,SAAS,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;MAAED,CAAC,CAACN,IAAI,GAAGO,CAAC,CAACE,OAAO;IAAE,CAAC,CAAC;IAC7EN,CAAC,CAACC,OAAO,CAACX,uBAAuB,CAACY,SAAS,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;MAAED,CAAC,CAACN,IAAI,GAAGM,CAAC,CAACN,IAAI,CAACU,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKa,CAAC,CAACE,OAAO,CAACf,EAAE,GAAGa,CAAC,CAACE,OAAO,GAAGE,CAAC,CAAC;IAAE,CAAC,CAAC;EAC9H;AACF,CAAC,CAAC;AACF,eAAed,KAAK,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}