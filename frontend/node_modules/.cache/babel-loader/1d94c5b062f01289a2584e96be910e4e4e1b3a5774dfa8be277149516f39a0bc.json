{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job (coverLetter file + CV link)\nexport const applyJob = createAsyncThunk('applications/apply', async (data, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.post('/applications', data);\n    return res.data;\n  } catch (err) {\n    var _err$response;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Fetch cover letter as Blob and convert to URL\nexport const fetchCoverLetter = createAsyncThunk('applications/fetchCoverLetter', async (filename, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/files/${filename}`, {\n      responseType: 'blob'\n    });\n    const url = window.URL.createObjectURL(res.data);\n    return url;\n  } catch (err) {\n    var _err$response2;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Get all applications for a specific job (admin)\nexport const getApplicationsForJob = createAsyncThunk('applications/forJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/applications/job/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response3;\n    return rejectWithValue(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Fetch job details\nexport const fetchJob = createAsyncThunk('jobs/fetchJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/jobs/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response4;\n    return rejectWithValue(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Update application status\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({\n  id,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.put(`/applications/${id}`, {\n      status\n    });\n    return res.data;\n  } catch (err) {\n    var _err$response5;\n    return rejectWithValue(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data) || {\n      message: err.message\n    });\n  }\n});\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],\n    last: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(applyJob.fulfilled, (state, action) => {\n      state.last = action.payload;\n      state.error = null;\n    }).addCase(applyJob.rejected, (state, action) => {\n      var _action$payload;\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'Failed to apply';\n    }).addCase(getApplicationsForJob.fulfilled, (state, action) => {\n      state.list = action.payload;\n      state.error = null;\n    }).addCase(getApplicationsForJob.rejected, (state, action) => {\n      var _action$payload2;\n      state.error = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message) || 'Failed to fetch applications';\n    }).addCase(updateApplicationStatus.fulfilled, (state, action) => {\n      state.list = state.list.map(x => x.id === action.payload.id ? action.payload : x);\n      state.error = null;\n    }).addCase(updateApplicationStatus.rejected, (state, action) => {\n      var _action$payload3;\n      state.error = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.message) || 'Failed to update status';\n    });\n  }\n});\nexport const {\n  clearError\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","applyJob","data","rejectWithValue","res","post","err","_err$response","response","message","fetchCoverLetter","filename","get","responseType","url","window","URL","createObjectURL","_err$response2","getApplicationsForJob","jobId","_err$response3","fetchJob","_err$response4","updateApplicationStatus","id","status","put","_err$response5","slice","name","initialState","list","last","error","reducers","clearError","state","extraReducers","builder","addCase","fulfilled","action","payload","rejected","_action$payload","_action$payload2","map","x","_action$payload3","actions","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/store/slices/applicationsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\n// Apply for a job (coverLetter file + CV link)\r\nexport const applyJob = createAsyncThunk(\r\n  'applications/apply',\r\n  async (data, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.post('/applications', data);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch cover letter as Blob and convert to URL\r\nexport const fetchCoverLetter = createAsyncThunk(\r\n  'applications/fetchCoverLetter',\r\n  async (filename, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.get(`/files/${filename}`, { responseType: 'blob' });\r\n      const url = window.URL.createObjectURL(res.data);\r\n      return url;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Get all applications for a specific job (admin)\r\nexport const getApplicationsForJob = createAsyncThunk(\r\n  'applications/forJob',\r\n  async (jobId, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.get(`/applications/job/${jobId}`);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch job details\r\nexport const fetchJob = createAsyncThunk(\r\n  'jobs/fetchJob',\r\n  async (jobId, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.get(`/jobs/${jobId}`);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Update application status\r\nexport const updateApplicationStatus = createAsyncThunk(\r\n  'applications/update',\r\n  async ({ id, status }, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.put(`/applications/${id}`, { status });\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\nconst slice = createSlice({\r\n  name: 'applications',\r\n  initialState: {\r\n    list: [],\r\n    last: null,\r\n    status: 'idle',\r\n    error: null\r\n  },\r\n  reducers: {\r\n    clearError: (state) => { state.error = null; }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(applyJob.fulfilled, (state, action) => {\r\n        state.last = action.payload;\r\n        state.error = null;\r\n      })\r\n      .addCase(applyJob.rejected, (state, action) => {\r\n        state.error = action.payload?.message || 'Failed to apply';\r\n      })\r\n\r\n      .addCase(getApplicationsForJob.fulfilled, (state, action) => {\r\n        state.list = action.payload;\r\n        state.error = null;\r\n      })\r\n      .addCase(getApplicationsForJob.rejected, (state, action) => {\r\n        state.error = action.payload?.message || 'Failed to fetch applications';\r\n      })\r\n\r\n      .addCase(updateApplicationStatus.fulfilled, (state, action) => {\r\n        state.list = state.list.map(x => x.id === action.payload.id ? action.payload : x);\r\n        state.error = null;\r\n      })\r\n      .addCase(updateApplicationStatus.rejected, (state, action) => {\r\n        state.error = action.payload?.message || 'Failed to update status';\r\n      });\r\n  }\r\n});\r\n\r\nexport const { clearError } = slice.actions;\r\nexport default slice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}