{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\nimport { setAuthToken } from './jobsSlice'; // reuse your existing token setter\n\n// Fetch applications for logged-in user\nexport const fetchMyApplications = createAsyncThunk('applications/fetchMine', async (_, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  if (!token) throw new Error('Not logged in');\n  setAuthToken(token);\n  const res = await api.get('/applications/mine');\n  return res.data;\n});\nconst myApplicationsSlice = createSlice({\n  name: 'myApplications',\n  initialState: {\n    list: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchMyApplications.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchMyApplications.fulfilled, (state, action) => {\n      state.list = action.payload;\n      state.status = 'succeeded';\n      state.error = null;\n    }).addCase(fetchMyApplications.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default myApplicationsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","setAuthToken","fetchMyApplications","_","getState","token","auth","Error","res","get","data","myApplicationsSlice","name","initialState","list","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/store/slices/myapplicationslices.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\nimport { setAuthToken } from './jobsSlice'; // reuse your existing token setter\r\n\r\n// Fetch applications for logged-in user\r\nexport const fetchMyApplications = createAsyncThunk(\r\n  'applications/fetchMine',\r\n  async (_, { getState }) => {\r\n    const token = getState().auth.token;\r\n    if (!token) throw new Error('Not logged in');\r\n\r\n    setAuthToken(token);\r\n    const res = await api.get('/applications/mine');\r\n    return res.data;\r\n  }\r\n);\r\n\r\nconst myApplicationsSlice = createSlice({\r\n  name: 'myApplications',\r\n  initialState: { list: [], status: 'idle', error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchMyApplications.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchMyApplications.fulfilled, (state, action) => {\r\n        state.list = action.payload;\r\n        state.status = 'succeeded';\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchMyApplications.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default myApplicationsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,oBAAoB;AACpC,SAASC,YAAY,QAAQ,aAAa,CAAC,CAAC;;AAE5C;AACA,OAAO,MAAMC,mBAAmB,GAAGH,gBAAgB,CACjD,wBAAwB,EACxB,OAAOI,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;EAE5CN,YAAY,CAACI,KAAK,CAAC;EACnB,MAAMG,GAAG,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,oBAAoB,CAAC;EAC/C,OAAOD,GAAG,CAACE,IAAI;AACjB,CACF,CAAC;AAED,MAAMC,mBAAmB,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC;EACvDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,mBAAmB,CAACmB,OAAO,EAAGC,KAAK,IAAK;MAC/CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAAClB,mBAAmB,CAACqB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDI,OAAO,CAAClB,mBAAmB,CAACwB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACxDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAehB,mBAAmB,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}