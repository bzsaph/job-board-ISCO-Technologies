{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job: sends FormData (coverLetter file + cvLink)\nexport const applyJob = createAsyncThunk('applications/apply', async (formData, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.post('/applications', formData);\n    return res.data;\n  } catch (err) {\n    var _err$response;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Fetch all applications for a specific job (admin)\nexport const getApplicationsForJob = createAsyncThunk('applications/forJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/applications/job/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response2;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Update application status (admin)\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({\n  id,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.put(`/applications/${id}`, {\n      status\n    });\n    return res.data;\n  } catch (err) {\n    var _err$response3;\n    return rejectWithValue(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n      message: err.message\n    });\n  }\n});\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],\n    // applications for a job\n    last: null,\n    // last application submitted\n    status: 'idle',\n    // loading status\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Successfully applied\n    .addCase(applyJob.fulfilled, (state, action) => {\n      state.last = action.payload;\n      state.error = null;\n    }).addCase(applyJob.rejected, (state, action) => {\n      var _action$payload;\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'Failed to apply';\n    })\n\n    // Get applications for a job\n    .addCase(getApplicationsForJob.fulfilled, (state, action) => {\n      state.list = action.payload;\n      state.error = null;\n    }).addCase(getApplicationsForJob.rejected, (state, action) => {\n      var _action$payload2;\n      state.error = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message) || 'Failed to fetch applications';\n    })\n\n    // Update application status\n    .addCase(updateApplicationStatus.fulfilled, (state, action) => {\n      state.list = state.list.map(x => x.id === action.payload.id ? action.payload : x);\n      state.error = null;\n    }).addCase(updateApplicationStatus.rejected, (state, action) => {\n      var _action$payload3;\n      state.error = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.message) || 'Failed to update status';\n    });\n  }\n});\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","applyJob","formData","rejectWithValue","res","post","data","err","_err$response","response","message","getApplicationsForJob","jobId","get","_err$response2","updateApplicationStatus","id","status","put","_err$response3","slice","name","initialState","list","last","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","rejected","_action$payload","_action$payload2","map","x","_action$payload3","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/pages/JobDetails.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job: sends FormData (coverLetter file + cvLink)\nexport const applyJob = createAsyncThunk(\n  'applications/apply',\n  async (formData, { rejectWithValue }) => {\n    try {\n      const res = await api.post('/applications', formData);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\n// Fetch all applications for a specific job (admin)\nexport const getApplicationsForJob = createAsyncThunk(\n  'applications/forJob',\n  async (jobId, { rejectWithValue }) => {\n    try {\n      const res = await api.get(`/applications/job/${jobId}`);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\n// Update application status (admin)\nexport const updateApplicationStatus = createAsyncThunk(\n  'applications/update',\n  async ({ id, status }, { rejectWithValue }) => {\n    try {\n      const res = await api.put(`/applications/${id}`, { status });\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],     // applications for a job\n    last: null,   // last application submitted\n    status: 'idle', // loading status\n    error: null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Successfully applied\n      .addCase(applyJob.fulfilled, (state, action) => {\n        state.last = action.payload;\n        state.error = null;\n      })\n      .addCase(applyJob.rejected, (state, action) => {\n        state.error = action.payload?.message || 'Failed to apply';\n      })\n\n      // Get applications for a job\n      .addCase(getApplicationsForJob.fulfilled, (state, action) => {\n        state.list = action.payload;\n        state.error = null;\n      })\n      .addCase(getApplicationsForJob.rejected, (state, action) => {\n        state.error = action.payload?.message || 'Failed to fetch applications';\n      })\n\n      // Update application status\n      .addCase(updateApplicationStatus.fulfilled, (state, action) => {\n        state.list = state.list.map(x =>\n          x.id === action.payload.id ? action.payload : x\n        );\n        state.error = null;\n      })\n      .addCase(updateApplicationStatus.rejected, (state, action) => {\n        state.error = action.payload?.message || 'Failed to update status';\n      });\n  }\n});\n\nexport default slice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}