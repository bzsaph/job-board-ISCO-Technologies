{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job (coverLetter file + CV link via FormData)\nexport const applyJob = createAsyncThunk('applications/apply', async (data, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.post('/applications', data);\n    return res.data;\n  } catch (err) {\n    var _err$response;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: err.message\n    });\n  }\n});\nexport const fetchCoverLetter = createAsyncThunk('applications/fetchCoverLetter', async (filename, {\n  rejectWithValue\n}) => {\n  try {\n    // fetch as blob\n    const res = await api.get(`/files/${filename}`, {\n      responseType: 'blob'\n    });\n    // convert to URL for browser\n    const url = window.URL.createObjectURL(res.data);\n    return url;\n  } catch (err) {\n    var _err$response2;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {\n      message: err.message\n    });\n  }\n});\n// Get all applications for a specific job (admin)\nexport const getApplicationsForJob = createAsyncThunk('applications/myApplications', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get('/applications/mine/'); // backend uses auth token\n    console.log('My applications:', res.data);\n    return res.data;\n  } catch (err) {\n    var _err$response3;\n    return rejectWithValue(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Fetch job details\nexport const fetchJob = createAsyncThunk('jobs/fetchJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/jobs/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response4;\n    return rejectWithValue(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Update application status\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({\n  id,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.put(`/applications/${id}`, {\n      status\n    });\n    return res.data;\n  } catch (err) {\n    var _err$response5;\n    return rejectWithValue(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data) || {\n      message: err.message\n    });\n  }\n});\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],\n    last: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: b => {\n    b.addCase(applyJob.fulfilled, (s, a) => {\n      s.last = a.payload;\n      s.error = null;\n    });\n    b.addCase(applyJob.rejected, (s, a) => {\n      var _a$payload;\n      s.error = ((_a$payload = a.payload) === null || _a$payload === void 0 ? void 0 : _a$payload.message) || 'Failed to apply';\n    });\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => {\n      s.list = a.payload;\n      s.error = null;\n    });\n    b.addCase(getApplicationsForJob.rejected, (s, a) => {\n      var _a$payload2;\n      s.error = ((_a$payload2 = a.payload) === null || _a$payload2 === void 0 ? void 0 : _a$payload2.message) || 'Failed to fetch applications';\n    });\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => {\n      s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x);\n      s.error = null;\n    });\n    b.addCase(updateApplicationStatus.rejected, (s, a) => {\n      var _a$payload3;\n      s.error = ((_a$payload3 = a.payload) === null || _a$payload3 === void 0 ? void 0 : _a$payload3.message) || 'Failed to update status';\n    });\n  }\n});\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","applyJob","data","rejectWithValue","res","post","err","_err$response","response","message","fetchCoverLetter","filename","get","responseType","url","window","URL","createObjectURL","_err$response2","getApplicationsForJob","_","console","log","_err$response3","fetchJob","jobId","_err$response4","updateApplicationStatus","id","status","put","_err$response5","slice","name","initialState","list","last","error","reducers","extraReducers","b","addCase","fulfilled","s","a","payload","rejected","_a$payload","_a$payload2","map","x","_a$payload3","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/store/slices/applicationsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job (coverLetter file + CV link via FormData)\nexport const applyJob = createAsyncThunk(\n  'applications/apply',\n  async (data, { rejectWithValue }) => {\n    try {\n      const res = await api.post('/applications', data);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\nexport const fetchCoverLetter = createAsyncThunk(\n  'applications/fetchCoverLetter',\n  async (filename, { rejectWithValue }) => {\n    try {\n      // fetch as blob\n      const res = await api.get(`/files/${filename}`, { responseType: 'blob' });\n      // convert to URL for browser\n      const url = window.URL.createObjectURL(res.data);\n      return url;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n// Get all applications for a specific job (admin)\nexport const getApplicationsForJob =  createAsyncThunk(\n  'applications/myApplications',\n  async (_, { rejectWithValue }) => {\n    try {\n      const res = await api.get('/applications/mine/'); // backend uses auth token\n      console.log('My applications:', res.data);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\n// Fetch job details\nexport const fetchJob = createAsyncThunk(\n  'jobs/fetchJob',\n  async (jobId, { rejectWithValue }) => {\n    try {\n      const res = await api.get(`/jobs/${jobId}`);\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\n// Update application status\nexport const updateApplicationStatus = createAsyncThunk(\n  'applications/update',\n  async ({ id, status }, { rejectWithValue }) => {\n    try {\n      const res = await api.put(`/applications/${id}`, { status });\n      return res.data;\n    } catch (err) {\n      return rejectWithValue(err.response?.data || { message: err.message });\n    }\n  }\n);\n\nconst slice = createSlice({\n  name: 'applications',\n  initialState: { list: [], last: null, status: 'idle', error: null },\n  reducers: {},\n  extraReducers: (b) => {\n    b.addCase(applyJob.fulfilled, (s, a) => { \n      s.last = a.payload; \n      s.error = null;\n    });\n    b.addCase(applyJob.rejected, (s, a) => { \n      s.error = a.payload?.message || 'Failed to apply'; \n    });\n\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => { \n      s.list = a.payload; \n      s.error = null;\n    });\n    b.addCase(getApplicationsForJob.rejected, (s, a) => { \n      s.error = a.payload?.message || 'Failed to fetch applications'; \n    });\n\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => { \n      s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x); \n      s.error = null;\n    });\n    b.addCase(updateApplicationStatus.rejected, (s, a) => { \n      s.error = a.payload?.message || 'Failed to update status'; \n    });\n  }\n});\n\nexport default slice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}