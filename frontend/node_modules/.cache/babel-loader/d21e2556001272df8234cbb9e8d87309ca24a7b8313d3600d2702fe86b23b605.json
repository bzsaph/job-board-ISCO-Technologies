{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Apply for a job (coverLetter file + CV link via FormData)\nexport const applyJob = createAsyncThunk('applications/apply', async (data, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.post('/applications', data);\n    return res.data;\n  } catch (err) {\n    var _err$response;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || {\n      message: err.message\n    });\n  }\n});\n// In your component\nconst viewPDF = async filename => {\n  try {\n    const res = await fetch(`http://localhost:5000/api/files/${filename}`);\n    if (!res.ok) throw new Error('File not found');\n    const blob = await res.blob();\n\n    // Optional: check that it’s actually a PDF\n    if (blob.type !== 'application/pdf') {\n      throw new Error('Invalid file type');\n    }\n    const url = window.URL.createObjectURL(blob);\n    window.open(url); // open in new tab\n  } catch (err) {\n    console.error('Failed to fetch PDF', err);\n    alert('Could not load PDF. File may be missing.');\n  }\n};\n\n// Get all applications for a specific job (admin)\nexport const getApplicationsForJob = createAsyncThunk('applications/forJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/applications/job/${jobId}`);\n    console.log('Applications for job:', res.data);\n    return res.data;\n  } catch (err) {\n    var _err$response2;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Fetch job details\nexport const fetchJob = createAsyncThunk('jobs/fetchJob', async (jobId, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.get(`/jobs/${jobId}`);\n    return res.data;\n  } catch (err) {\n    var _err$response3;\n    return rejectWithValue(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n      message: err.message\n    });\n  }\n});\n\n// Update application status\nexport const updateApplicationStatus = createAsyncThunk('applications/update', async ({\n  id,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await api.put(`/applications/${id}`, {\n      status\n    });\n    return res.data;\n  } catch (err) {\n    var _err$response4;\n    return rejectWithValue(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) || {\n      message: err.message\n    });\n  }\n});\nconst slice = createSlice({\n  name: 'applications',\n  initialState: {\n    list: [],\n    last: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: b => {\n    b.addCase(applyJob.fulfilled, (s, a) => {\n      s.last = a.payload;\n      s.error = null;\n    });\n    b.addCase(applyJob.rejected, (s, a) => {\n      var _a$payload;\n      s.error = ((_a$payload = a.payload) === null || _a$payload === void 0 ? void 0 : _a$payload.message) || 'Failed to apply';\n    });\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => {\n      s.list = a.payload;\n      s.error = null;\n    });\n    b.addCase(getApplicationsForJob.rejected, (s, a) => {\n      var _a$payload2;\n      s.error = ((_a$payload2 = a.payload) === null || _a$payload2 === void 0 ? void 0 : _a$payload2.message) || 'Failed to fetch applications';\n    });\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => {\n      s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x);\n      s.error = null;\n    });\n    b.addCase(updateApplicationStatus.rejected, (s, a) => {\n      var _a$payload3;\n      s.error = ((_a$payload3 = a.payload) === null || _a$payload3 === void 0 ? void 0 : _a$payload3.message) || 'Failed to update status';\n    });\n  }\n});\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","applyJob","data","rejectWithValue","res","post","err","_err$response","response","message","viewPDF","filename","fetch","ok","Error","blob","type","url","window","URL","createObjectURL","open","console","error","alert","getApplicationsForJob","jobId","get","log","_err$response2","fetchJob","_err$response3","updateApplicationStatus","id","status","put","_err$response4","slice","name","initialState","list","last","reducers","extraReducers","b","addCase","fulfilled","s","a","payload","rejected","_a$payload","_a$payload2","map","x","_a$payload3","reducer"],"sources":["D:/fullstacker/job-board/frontend/src/store/slices/applicationsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\n// Apply for a job (coverLetter file + CV link via FormData)\r\nexport const applyJob = createAsyncThunk(\r\n  'applications/apply',\r\n  async (data, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.post('/applications', data);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n// In your component\r\nconst viewPDF = async (filename) => {\r\n  try {\r\n    const res = await fetch(`http://localhost:5000/api/files/${filename}`);\r\n    if (!res.ok) throw new Error('File not found');\r\n    \r\n    const blob = await res.blob();\r\n\r\n    // Optional: check that it’s actually a PDF\r\n    if (blob.type !== 'application/pdf') {\r\n      throw new Error('Invalid file type');\r\n    }\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    window.open(url); // open in new tab\r\n  } catch (err) {\r\n    console.error('Failed to fetch PDF', err);\r\n    alert('Could not load PDF. File may be missing.');\r\n  }\r\n};\r\n\r\n// Get all applications for a specific job (admin)\r\nexport const getApplicationsForJob = createAsyncThunk(\r\n  'applications/forJob',\r\n  async (jobId, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.get(`/applications/job/${jobId}`);\r\n      console.log('Applications for job:', res.data);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch job details\r\nexport const fetchJob = createAsyncThunk(\r\n  'jobs/fetchJob',\r\n  async (jobId, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.get(`/jobs/${jobId}`);\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\n// Update application status\r\nexport const updateApplicationStatus = createAsyncThunk(\r\n  'applications/update',\r\n  async ({ id, status }, { rejectWithValue }) => {\r\n    try {\r\n      const res = await api.put(`/applications/${id}`, { status });\r\n      return res.data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data || { message: err.message });\r\n    }\r\n  }\r\n);\r\n\r\nconst slice = createSlice({\r\n  name: 'applications',\r\n  initialState: { list: [], last: null, status: 'idle', error: null },\r\n  reducers: {},\r\n  extraReducers: (b) => {\r\n    b.addCase(applyJob.fulfilled, (s, a) => { \r\n      s.last = a.payload; \r\n      s.error = null;\r\n    });\r\n    b.addCase(applyJob.rejected, (s, a) => { \r\n      s.error = a.payload?.message || 'Failed to apply'; \r\n    });\r\n\r\n    b.addCase(getApplicationsForJob.fulfilled, (s, a) => { \r\n      s.list = a.payload; \r\n      s.error = null;\r\n    });\r\n    b.addCase(getApplicationsForJob.rejected, (s, a) => { \r\n      s.error = a.payload?.message || 'Failed to fetch applications'; \r\n    });\r\n\r\n    b.addCase(updateApplicationStatus.fulfilled, (s, a) => { \r\n      s.list = s.list.map(x => x.id === a.payload.id ? a.payload : x); \r\n      s.error = null;\r\n    });\r\n    b.addCase(updateApplicationStatus.rejected, (s, a) => { \r\n      s.error = a.payload?.message || 'Failed to update status'; \r\n    });\r\n  }\r\n});\r\n\r\nexport default slice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}